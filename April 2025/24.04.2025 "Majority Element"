Majority Elemen

M1-
class Solution {
  public:
    int majorityElement(vector<int>& arr) {
        // code here
        // Brute force approach - T.C = O(n^2)
        
        int n= arr.size();
        for(int i = 0;i<n;i++){
            int ele = arr[i];
            int count = 0;
            for(int j = 0;j<n;j++){
                if(arr[j]==ele) count++;
            }
           if(count > (n/2)) return arr[i];
        }
        return -1;
    }
}

m2 

class Solution {
  public:
    int majorityElement(vector<int>& arr) {
        // code here
         unordered_map<int,int>mp;
         int n = arr.size();
         if(n==1) return arr[0];
         for(int i=0;i<n;i++ ){
             mp[arr[i]]++;
         }
         
         for(auto &it : mp){
             if(it.second > n/2 ){
                 return it.first;
             }
         }
         return -1;
    }
};

M3-

class Solution {
  public:
    int majorityElement(vector<int>& arr) {
        // code here
         unordered_map<int,int>mp;
         int n = arr.size();
         if(n==1) return arr[0];
         for(int i=0;i<n;i++ ){
             mp[arr[i]]++;
         }
         
         for(auto &it : mp){
             if(it.second > n/2 ){
                 return it.first;
             }
         }
         return -1;
    }
};


m3-


// User function template for C++

class Solution {
  public:
    int majorityElement(vector<int>& arr) {
        // code here
        //Optimal appraoch Using Moore voting algo
        
        //1step
        int n = arr.size();
        int count = 1, res = 0;
        for(int i = 1; i<n;i++){
            if(arr[i] == arr[res]) count++;
            else count--;
            
            if(count == 0){
                count =1;
                res = i;
            }
        }
        
        // 2nd step - check n/2
        count =0;
        for(int i = 0;i<n;i++){
            if(arr[res] == arr[i]) count++;
        }
        if(count <= (n/2)) return -1;
        else return arr[res];
        
    }
};
